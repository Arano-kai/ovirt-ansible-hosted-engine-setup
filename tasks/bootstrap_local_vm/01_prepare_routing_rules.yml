---
- name: Prepare routing rules
  block:
  - name: Start libvirt
    service:
      name: libvirtd
      state: started
      enabled: true
  - name: Activate default libvirt network
    virt_net:
      name: default
      state: active
    register: virt_net_out
  - debug: var=virt_net_out
  - name: Check IPv6
    set_fact:
      ipv6_deployment: >-
        {{ true if r_host_address != target_address_v4 and r_host_address in target_address_v6_list else false }}
  - include_tasks: libvirt_default_net_ipv6_tasks.yml
    when: ipv6_deployment
    # all of the next is a workaround for a network issue:
    # vdsm installation breaks the routing by defining separate
    # routing table for ovirtmgmt. But we need to enable communication
    # between virbr0 and ovirtmgmt
  - name: Get libvirt interfaces
    virt_net:
      command: facts
  - name: Get routing rules
    command: ip {%-if ipv6_deployment%} -6 {%-endif%} rule
    environment: "{{ he_cmd_lang }}"
    register: route_rules
    changed_when: true
  - debug: var=route_rules
  - name: Save bridge name
    set_fact:
      virbr_default: "{{ ansible_libvirt_networks['default']['bridge'] }}"
  - name: Wait for the bridge to appear on the host
    command: ip link show {{ virbr_default }}
    environment: "{{ he_cmd_lang }}"
    changed_when: true
    register: ip_link_show_bridge
    until: ip_link_show_bridge.rc == 0
    retries: 30
    delay: 3
  - name: Refresh network facts
    setup:
    tags: [ 'skip_ansible_lint' ]
  - name: Fetch IPv4 subnet for {{ virbr_default }}
    # Single item list for use in unified route modification
    set_fact:
      virbr_subnets: >-
        {{ [(hostvars[inventory_hostname]['ansible_'+virbr_default]['ipv4']['address']+'/'
        +hostvars[inventory_hostname]['ansible_'+virbr_default]['ipv4']['netmask'])|ipv4('subnet')] }}
    when:
      - not ipv6_deployment
  - name: Fetch IPv6 subnets for {{ virbr_default }}
    set_fact:
      virbr_subnets: >-
        {{ (virbr_subnet|default([])+[item['address']+'/'+item['prefix'])|ipv6('subnet')])|unique }}
    when:
      - ipv6_deployment
    with_items: "{{ hostvars[inventory_hostname]['ansible_'+virbr_default]['ipv6']|rejectattr('scope','equalto','local')|list }}"
  - name: Add outbound route rules
    command: ip {%-if ipv6_deployment%} -6 {%-endif%} rule add from {{ item }} priority 101 table main
    environment: "{{ he_cmd_lang }}"
    register: result
    when:
      - route_rules.stdout|regex_search("^.*from\s+"+item|regex_escape()+"\s+lookup\s+main.*$", multiline=true) == None
    with_items: "{{ virbr_subnets }}"
  - debug: var=result
  - name: Add inbound route rules
    command: ip {%-if ipv6_deployment%} -6 {%-endif%} rule add from all to {{ item }} priority 100 table main
    environment: "{{ he_cmd_lang }}"
    register: result
    when:
      - route_rules.stdout|regex_search("^.*from\s+all\s+to\s+"+item|regex_escape()+"\s+lookup\s+main.*$", multiline=true) == None
    with_items: "{{ virbr_subnets }}"
  - debug: var=result
